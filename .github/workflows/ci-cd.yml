name: CI & CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
# ──────────────────────────────────────────
  test-backend:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}/backend
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install backend deps
        run: |
          pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run pytest
        working-directory: backend
        run: pytest --cov=app

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
# ──────────────────────────────────────────
  test-frontend:
    name: ⚛️ Frontend Tests
    needs: test-backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend deps
        working-directory: frontend
        run: npm ci

      - name: Run unit tests
        working-directory: frontend
        run: npm test         # script = jest --ci --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
# ──────────────────────────────────────────
  e2e:
    name: 🧪 E2E Tests
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        ports: ["3307:3306"]
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE:     mydb
          MYSQL_USER:         test
          MYSQL_PASSWORD:     testpass
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uroot -proot --silent"
          --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - uses: actions/checkout@v3

      # ── Backend ─────────────────────────────────────────────────────────
      - name: Setup Python & Backend
        uses: actions/setup-python@v4
        with: { python-version: '3.11' }
        env: { PYTHONPATH: ${{ github.workspace }}/backend }

      - run: pip install -r backend/requirements.txt

      - name: Start Flask API
        working-directory: backend
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: mydb
          DB_USER: test
          DB_PASSWORD: testpass
        run: nohup gunicorn -w 2 -b 0.0.0.0:5000 app.routes:app &

      # ── Frontend : install seulement (sans démarrer encore) ─────────────
      - uses: actions/setup-node@v3
        with: { node-version: '18' }

      - name: Install frontend deps
        working-directory: frontend
        run: npm ci

      # ── Cypress : démarre React puis exécute les tests ──────────────────
      - name: Run Cypress
        uses: cypress-io/github-action@v5
        with:
          working-directory: frontend            # dossier racine pour Cypress
          start: npm start                      # démarre React (port 3000)
          wait-on: http://localhost:3000
          wait-on-timeout: 90                   # délai un peu plus large
          config-file: cypress.config.js        # config à la racine du dossier
        env:
          REACT_APP_API_URL: http://localhost:5000
# ──────────────────────────────────────────
  deploy:
    name: 🚀 Deploy to GitHub Pages & Vercel
    needs: e2e
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with: { node-version: '18' }

      - name: Build frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./frontend/build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token:      ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id:     ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: backend
          prod: true
