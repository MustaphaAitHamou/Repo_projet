name: CI & CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:

  test-backend:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}/backend
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with: { python-version: '3.11' }
      - run: |
          pip install --upgrade pip
          pip install -r backend/requirements.txt
      - run: pytest --cov=app
        working-directory: backend

  test-frontend:
    name: ⚛️ Frontend Tests
    needs: test-backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with: { node-version: '18' }
      - run: npm ci
        working-directory: frontend
      - run: npm test -- --coverage
        working-directory: frontend

# ── 3) E2E Cypress ───────────────────────────────────────────────────────────
  e2e:
    name: 🧪 E2E Tests
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        ports: ['3307:3306']
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: mydb
          MYSQL_USER: test
          MYSQL_PASSWORD: testpass
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uroot -proot --silent"
          --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - uses: actions/checkout@v3

      # Backend API
      - uses: actions/setup-python@v4
        with: { python-version: '3.11' }
        env:
          PYTHONPATH: ${{ github.workspace }}/backend

      - run: pip install -r backend/requirements.txt

      - name: Start Flask API
        working-directory: backend
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3307
          DB_NAME: mydb
          DB_USER: test
          DB_PASSWORD: testpass
          ADMIN_PASSWORD: testadmin
        run: nohup gunicorn -w 2 -b 0.0.0.0:5000 app.routes:app &

      # Frontend deps
      - uses: actions/setup-node@v3
        with: { node-version: '18' }

      - run: npm ci
        working-directory: frontend

      # Cypress run
      - name: Run Cypress
        uses: cypress-io/github-action@v5
        with:
          working-directory: frontend
          start: npm start
          wait-on: http://localhost:3000
          wait-on-timeout: 90
          config-file: cypress.config.js
        env:
          REACT_APP_API_URL: http://localhost:5000
          REACT_APP_ADMIN_PASSWORD: testadmin

# ── 4) Déploiement ───────────────────────────────────────────────────────────
  deploy:
    name: 🚀 Deploy
    needs: e2e
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with: { node-version: '18' }

      - name: Build frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build

      # ── Diagnostic : les trois secrets sont-ils présents ? ───────────────
      - name: Check Vercel secrets presence
        run: |
          echo "VERCEL_TOKEN set?      -> ${{ secrets.VERCEL_TOKEN != '' }}"
          echo "VERCEL_ORG_ID set?     -> ${{ secrets.VERCEL_ORG_ID != '' }}"
          echo "VERCEL_PROJECT_ID set? -> ${{ secrets.VERCEL_PROJECT_ID != '' }}"

      # ── GitHub Pages ────────────────────────────────────────────────────
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: frontend/build

      # ── Vercel production ───────────────────────────────────────────────
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token:      ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id:     ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: backend        # change si tu déploies le front
          vercel-args: '--prod'
