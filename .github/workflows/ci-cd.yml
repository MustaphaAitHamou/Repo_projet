# .github/workflows/ci-cd.yml
name: CI & CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    name: üêç Backend Tests
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}/backend   # <‚Äî Ajout√© ici
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install backend deps
        run: |
          pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run pytest
        working-directory: backend
        run: pytest --cov=app

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  test-frontend:
    name: ‚öõÔ∏è Frontend Tests
    needs: test-backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend deps
        run: npm ci
        working-directory: frontend

      - name: Run unit tests
        run: npm test -- --coverage
        working-directory: frontend

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  e2e:
    name: üß™ E2E Tests
    needs: [ test-backend, test-frontend ]
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        ports:
          - "3307:3306"
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          MYSQL_DATABASE:     ${{ secrets.DB_NAME }}
          MYSQL_USER:         ${{ secrets.DB_USER }}
          MYSQL_PASSWORD:     ${{ secrets.DB_PASSWORD }}
        options: >-
          --health-cmd="mysqladmin ping -h localhost --silent"
          --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python & Backend
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
        env:
          PYTHONPATH: ${{ github.workspace }}/backend   # idem ici

      - name: Install backend deps
        run: pip install -r backend/requirements.txt

      - name: Start Flask API
        run: |
          nohup gunicorn -w 2 -b 0.0.0.0:5000 app.routes:app &
        working-directory: backend

      - name: Setup Node.js & Frontend
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend deps & start
        run: |
          nohup npm ci --prefix frontend
          nohup npm start --prefix frontend &
        working-directory: frontend

      - name: Run Cypress
        uses: cypress-io/github-action@v5
        with:
          start: npm start --prefix frontend
          wait-on: http://localhost:3000
          wait-on-timeout: 60

  deploy:
    name: üöÄ Deploy to GitHub Pages & Vercel
    needs: e2e
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Build frontend
        run: npm ci && npm run build
        working-directory: frontend

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./frontend/build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: backend
          prod: true
